"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleImports = void 0;
const rollup = __importStar(require("rollup"));
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const plugin_commonjs_1 = __importDefault(require("@rollup/plugin-commonjs"));
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const transpile_1 = require("./transpile");
const supportedExtensions = [".ts", ".vts"];
const bundleImports = async (pathForProject, file) => {
    const virtualPlugin = {
        name: "virtual",
        resolveId: (source, importer) => {
            if (source === file.name)
                return source;
            if (!importer)
                return null;
            for (const ext of supportedExtensions) {
                const resolvedPath = node_path_1.default.join(file.path.substring(0, file.path.lastIndexOf("/")), source) + ext;
                if (node_fs_1.default.existsSync(resolvedPath)) {
                    return resolvedPath;
                }
            }
            return null;
        },
        load: (path) => {
            if (path === file.name)
                return file.content;
            if (node_fs_1.default.existsSync(path)) {
                const transpiledResult = (0, transpile_1.transpileFromTypeScript)({
                    name: path,
                    path,
                    content: node_fs_1.default.readFileSync(path, "utf-8")
                });
                if (transpiledResult.success)
                    return transpiledResult.output;
            }
            return null;
        }
    };
    const bundle = await rollup.rollup({
        input: file.name,
        plugins: [
            (0, plugin_node_resolve_1.default)({
                modulePaths: [node_path_1.default.join(pathForProject, "node_modules"), node_path_1.default.join(pathForProject, "scripts", "vscripts")],
                extensions: supportedExtensions
            }),
            (0, plugin_commonjs_1.default)(),
            virtualPlugin
        ],
        external: ["cspointscript", "cs_script/point_script"]
    });
    const { output } = await bundle.generate({
        format: "es",
        sourcemap: false
    });
    return output[0];
};
exports.bundleImports = bundleImports;
